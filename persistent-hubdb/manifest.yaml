# PersistentVolumes are not namespaced, and are created by an admin.
# The admin must also create the backing gcePersistentDisk, with something
# like the following:
#
#   gcloud compute disks create hub-workdir-01 --size 1GiB
#
# The name should match the pdName field in the PersistentVolume object.
#
# When you are done, remember to delete the disks manually, or you will
# continue to be charged for them! You can delete disks with:
#
#   gcloud compute disks delete hub-workdir-01
#
# This can eventually be automated when https://github.com/kubernetes/kubernetes/blob/master/docs/proposals/volume-provisioning.md
# lands.
#
# The persistent volume is used for storing the sqlite db and the cookie secret.
apiVersion: v1
kind: PersistentVolume
metadata:
  name: hub-workdir-01
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  gcePersistentDisk:
    pdName: hub-workdir-01
    fsType: ext4
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: hub-workdir
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hub-config
data:
  # Used to authenticate the hub to the proxy. This string was generated with `pwgen 64`.
  # Please generate a new one for your own deployment!
  auth.configproxy-token: Kev4Shai9phai0Eez2aiyaefaepheutei3baehaiseipheef1Ah2cah4xeaquohr
---
# We put services before deployments, so that the env variables required to discover
# the services' IPs are present in the containers when they start. If we don't do this,
# it is possible some pods will get created before the service objects exist, and will
# not get the appropriate env variables until a restart.
apiVersion: v1
kind: Service
metadata:
  name: proxy-api
spec:
  selector:
    name: proxy-pod
  ports:
    - protocol: TCP
      port: 8001
      targetPort: 8001
---
apiVersion: v1
kind: Service
metadata:
  name: proxy-public
spec:
  type: LoadBalancer
  selector:
    name: proxy-pod
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: hub
spec:
  selector:
    name: hub-pod
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: hub-deployment
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: hub-pod
    spec:
      volumes:
      - name: hub-workdir-volume
        persistentVolumeClaim:
          claimName: hub-workdir
      containers:
      - name: proxy-container
        image: yuvipanda/separate-proxy-hub:v1
        volumeMounts:
          - mountPath: /srv/jupyterhub
            name: hub-workdir-volume
        env:
          - name: CONFIGPROXY_AUTH_TOKEN
            valueFrom:
              configMapKeyRef:
                name: hub-config
                key: auth.configproxy-token
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        ports:
          - containerPort: 8081
            name: hub
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: proxy-deployment
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: proxy-pod
    spec:
      containers:
      - name: proxy-container
        image: yuvipanda/nchp:v1
        env:
          - name: CONFIGPROXY_AUTH_TOKEN
            valueFrom:
              configMapKeyRef:
                name: hub-config
                key: auth.configproxy-token
        ports:
          - containerPort: 8000
            name: proxy-public
          - containerPort: 8001
            name: api
---
